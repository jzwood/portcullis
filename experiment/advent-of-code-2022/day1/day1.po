# CHAR UTILS #
# asciiDecToChar dec = - dec 48 #
asciiDecToChar -> Num Num
asciiDecToChar dec =
  ? == dec 48 0
  ? == dec 49 1
  ? == dec 50 2
  ? == dec 51 3
  ? == dec 52 4
  ? == dec 53 5
  ? == dec 54 6
  ? == dec 55 7
  ? == dec 56 8
  ? == dec 57 9 0

_read -> Num -> [Num] [Num]
_read dec nums = +> * (exp 10 (length nums)) (asciiDecToChar dec) nums

read -> [Num] Num
read decimals = (sum (foldl _read Num:[] decimals))

# MATH UTILS #
# https://en.wikipedia.org/wiki/Exponentiation_by_squaring #
exp -> Num -> Num Num
exp x n =
  ? < n 0 (exp / 1 x - 0 1)
  ? == n 0 1
  ? == % n 2 0 (exp * x x / n 2)
  * x (exp * x x / - n 1 2)

# LIST UTILS #
_foldl -> -> j -> k k -> k -> j -> [j] k
_foldl alg acc x xs = (alg x (foldl alg acc xs))

foldl -> -> a -> b b -> b -> [a] b
foldl alg acc xs =
  <+ xs acc (_foldl alg acc)

_map -> -> q t -> q -> [q] [t]
_map f x xs = +> (f x) (map f xs)

map -> -> t g -> [t] [g]
map f xs =
  <+ xs g:[] (_map f)

_len -> a -> Num Num
_len x len = + 1 len

length -> [a] Num
length xs = (foldl _len 0 xs)

add -> Num -> Num Num
add a b = + a b

sum -> [Num] Num
sum ns = (foldl add 0 ns)

_not -> x -> x Atom
_not a b = == False == a b

_max -> Num -> Num Num
_max num max = ? > num max num max

max -> [Num] Num
max nums = (foldl _max 0 nums)

curryCons -> {[a] [[a]]} [[a]]
curryCons tup = +> @1 tup @2 tup

_splitOn -> z -> z -> {[z] [[z]]} {[z] [[z]]}
_splitOn on x acc =
  ? (_not x on) {+> x @1 acc @2 acc}
  {z:[] (curryCons acc)}

splitOn -> a -> [a] [[a]]
splitOn on xs = (curryCons (foldl (_splitOn on) {a:[] [a]:[]} xs))

# ADVENT OF CODE DAY 1 #
parse -> [Num] [Num]
parse buffer = (map sum (splitOn 0 (map read (splitOn 10 buffer)))) # 10 is newline #

day1a -> [Num] Num
day1a buffer = (max (parse buffer))

#
day1b -> [Num] Num
day1b buffer = (sum (take 3 (reverse (sort (parse buffer)))))
#
